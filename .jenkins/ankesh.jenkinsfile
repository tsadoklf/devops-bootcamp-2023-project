
def createECRRepository(region, repository) {

  sh """
    if aws ecr describe-repositories --repository-names $repository --region $region >/dev/null 2>&1; then
        echo ""
        echo "Creating ECR repository $repository in region $region"
        echo "-----------------------------------------------------------"
        aws ecr create-repository --repository-name $repository --region $region
    fi
  """
}



def BuildTagAndPush(service) {

  def directory = "object-detection/${service}"
  def dockerfile = "${service}.dockerfile"
  def repository = "class-3-object-detection-${service}"
  
  def region = "${AWS_ECR_REGION}"

//   createECRRepository(region, repository)

  def registry = "${REGISTRY}"
  def tag = "${IMAGE_TAG}"

  def local_image_name = "${repository}:${tag}"
  def remote_image_name = "${registry}/${local_image_name}"

  echo local_image_name
  echo remote_image_name

  dir(path: directory) {

    sh """
      pwd

      echo ""
      ls -l 

      echo ""
      echo "Building Docker image $local_image_name"   
      echo "-----------------------------------------------------------"
      docker build -f $dockerfile -t $local_image_name .

      echo ""
      echo "Tagging Docker image $local_image_name as $remote_image_name"
      echo "-----------------------------------------------------------"
      docker tag $local_image_name $remote_image_name

      echo ""
      echo "Pushing Docker image $remote_image_name"
      echo "-----------------------------------------------------------"
      docker push $remote_image_name
    """
  }
}

pipeline {
  agent {
    kubernetes {
    //   yaml '''
    //   '''
        yamlFile '.jenkins/pod_templates/pod_template_extended.yaml'
    }
  }
  environment { 
    AWS_ACCOUNT  = "854171615125"
    AWS_ECR_REGION = "us-east-2"
    
    REGISTRY = "${AWS_ACCOUNT}.dkr.ecr.${AWS_ECR_REGION}.amazonaws.com"

    DOCKER_USERNAME = "AWS"
    
    SHARED_DATA_PATH = "/mnt/shared-data"
    AWS_ECR_TOKEN_FILE = "aws-ecr-token"
    EC2_INSTANCES_PUBLIC_IP_ADDRESSES = "ec2-instances-public-ip-addresses"
    EC2_INSTANCES_IDS = "ec2-instances-ids"

    GITHUB_ACCOUNT = "tsadoklf"
    GITHUB_REPO_URL = "https://github.com/${GITHUB_ACCOUNT}/devops-bootcamp-test.git"

    // IMAGE_TAG="tsadok-${BUILD_NUMBER}"
    IMAGE_TAG = "ankeshmobar"
  }
  stages {
    // git branch: 'main', changelog: false, poll: false, url: 'https://mohdsabir-cloudside@bitbucket.org/mohdsabir-cloudside/java-app.git'
    stage('Git: Clone Code') {
      steps {
        container('maven') {
          git branch: 'main', changelog: false, poll: false, 
            credentialsId: 'jenkins',
            url: "${GITHUB_REPO_URL}"
        }
      }
    }  

    stage('AWS: Install Tools') {
      steps {
        container('aws') {
          sh '''
            export KUBECONFIG="$SHARED_DATA_PATH/kubeconfig"

            yum update -y && yum install -y git tar openssl jq 
            
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && \
                    install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

            curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 && \
                chmod 700 get_helm.sh && \
                ./get_helm.sh                                
          '''
        }
      }
    }


    stage('AWS: Get ECR Token') {
      steps {
        container('aws') {
          sh '''
            echo "Getting AWS ECR token for Docker login..."
            aws ecr get-login-password --region $AWS_ECR_REGION > $SHARED_DATA_PATH/$AWS_ECR_TOKEN_FILE
          '''
        }
      }
    }

    stage('Get AWS update-kubeconfig') {
      steps {
        container('aws') {
          sh '''
            CLUSTER_NAME="k8s-batch3"
            REGION="us-west-2"
            KUBECONFIG="$SHARED_DATA_PATH/kubeconfig"

            aws eks update-kubeconfig --name $CLUSTER_NAME --region $REGION --kubeconfig $KUBECONFIG
          '''
        }
      }
    }

    stage('EKS: Deploy Hello-World using kubectl tool') {
      steps {
        container('aws') {
          sh '''
            export KUBECONFIG="$SHARED_DATA_PATH/kubeconfig"

            kubectl get ns --kubeconfig $KUBECONFIG

            ls -la
            K8S_DIR=".k8s/hello-world"

            kubectl apply -f $K8S_DIR/0-namespace.yaml  --kubeconfig $KUBECONFIG

            NAMESPACE="app"

            kubectl apply -f $K8S_DIR/1-service.yaml    -n $NAMESPACE --kubeconfig $KUBECONFIG
            kubectl apply -f $K8S_DIR/2-deployment.yaml -n $NAMESPACE --kubeconfig $KUBECONFIG
            kubectl apply -f $K8S_DIR/3-hpa.yaml        -n $NAMESPACE --kubeconfig $KUBECONFIG
            kubectl apply -f $K8S_DIR/4-ingress.yaml    -n $NAMESPACE --kubeconfig $KUBECONFIG

            kubectl get all -n $NAMESPACE --kubeconfig $KUBECONFIG
            
          '''
        }
      }
    }


    stage('EKS: Deploy App ') {
      steps {
        container('aws') {
          sh '''
            #!/bin/bash
            set +x

            export KUBECONFIG="$SHARED_DATA_PATH/kubeconfig"



            NAMESPACE="nginx"
            SERVICE_NAME="ingress-nginx-controller "

            # Get the external IP/hostname
            HOST_NAME=$(kubectl get service -n $NAMESPACE $SERVICE_NAME -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            echo "HOST_NAME: $HOST_NAME"

            echo BRANCH_NAME: $BRANCH_NAME

            if [ "$BRANCH_NAME" == "main" ]; then
                NAMESPACE="app-production"
                FRONTEND_ENDPOINT="ai-frontend"
                FRONTEND_REPLICAS=3
            else
                NAMESPACE="app-staging"
                FRONTEND_ENDPOINT="ai-frontend-staging"
                FRONTEND_REPLICAS=1
            fi

            NAMESPACE="app-production"
            FRONTEND_ENDPOINT="ai-frontend"
            FRONTEND_REPLICAS=3

            SECRET_NAME="ecr-credentials"
            DOCKER_USERNAME="AWS"            
            kubectl create secret docker-registry $SECRET_NAME \
                --docker-server=$REGISTRY \
                --docker-username="AWS" \
                --docker-password="$(cat $SHARED_DATA_PATH/$AWS_ECR_TOKEN_FILE)" \
                --namespace=$NAMESPACE || true

            set -x

            RELEASE_NAME="upes-ai-bot"
            CHART_NAME="upes-ai-bot"
            CHART_REPO="./helm/upes-ai-bot"
            
            echo ""
            echo "Installing '$CHART_NAME' in namespace '$NAMESPACE' using helm"
            echo "-----------------------------------------------------------"
            helm upgrade $CHART_NAME $CHART_REPO \
                --install \
                --create-namespace \
                --namespace $NAMESPACE \
                --kubeconfig $KUBECONFIG \
                --set ingress.hosts[0].host=$HOST_NAME \
                --set ingress.hosts[0].paths[0].path="/frontend/(.*)" \
                --set ingress.hosts[0].paths[0].pathType=Prefix \
                --set ingress.hosts[0].paths[0].backend.service.name=frontend \
                --set ingress.hosts[0].paths[0].backend.service.port.number=80 \
                --set services.frontend.replicas.min=$FRONTEND_REPLICAS \
                --set services.frontend.replicas.max=$FRONTEND_REPLICAS 
            
            kubectl get all -n $NAMESPACE --kubeconfig $KUBECONFIG
          '''
        }
      }
    }

    stage('EKS: Deploy Hello-World using Helm') {
      steps {
        container('aws') {
          sh '''
            export KUBECONFIG="$SHARED_DATA_PATH/kubeconfig"

            NAMESPACE="nginx"
            SERVICE_NAME="ingress-nginx-controller "

            # Get the external IP/hostname
            HOST_NAME=$(kubectl get service -n $NAMESPACE $SERVICE_NAME -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            echo "HOST_NAME: $HOST_NAME"


            ls -la
            ls -l helm

            NAMESPACE="hello-world"

            kubectl create namespace $NAMESPACE --kubeconfig $KUBECONFIG || true

            echo ""
            echo "Using Helm to installing another version of Hello-World"
            echo "-----------------------------------------------------------"

            RELEASE_NAME="hello-world"
            CHART_NAME="hello-world"
            CHART_REPO="./helm/hello-world"
            VALUES_FILE="k8s-install-jenkins-helm-values.yaml"

            echo ""
            echo "Installing '$CHART_NAME' in namespace '$NAMESPACE' using helm"
            echo "-----------------------------------------------------------"
            helm upgrade $CHART_NAME $CHART_REPO \
                --install \
                --namespace $NAMESPACE \
                --kubeconfig $KUBECONFIG \
                --set ingress.hosts[0].paths[0].path=/helm-hello-world \
                --set ingress.hosts[0].paths[0].pathType=Prefix \
                --set ingress.hosts[0].host=$HOST_NAME \
                --set replicaCount=3                
            
            kubectl get all -n $NAMESPACE --kubeconfig $KUBECONFIG
          '''
        }
      }
    }

    stage('EKS: Deploy Portainer') {
      steps {
        container('aws') {
          sh '''
            export KUBECONFIG="$SHARED_DATA_PATH/kubeconfig"

            NAMESPACE="nginx"
            SERVICE_NAME="ingress-nginx-controller "

            # Get the external IP/hostname
            HOST_NAME=$(kubectl get service -n $NAMESPACE $SERVICE_NAME -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            echo "HOST_NAME: $HOST_NAME"

            helm repo add portainer https://portainer.github.io/k8s/
            helm repo update

            helm upgrade --install --create-namespace -n portainer portainer portainer/portainer \
                --set service.type=ClusterIP \
                --set tls.force=false \
                --set ingress.enabled=true \
                --set ingress.ingressClassName=nginx \
                --set ingress.annotations."nginx\\.ingress\\.kubernetes\\.io\\/backend-protocol"=HTTP \
                --set ingress.hosts[0].host=$HOST_NAME \
                --set ingress.hosts[0].paths[0].path="/portainer"

          '''
        }
      }
    }
    // --values $VALUES_FILE
    //            --repo $CHART_REPO \

    stage('Docker: Check Daemon Is Up') {
        steps {
            container('dind') {
                sh '''
                    echo "Waiting for Docker daemon to be up ..."

                    # Check if Docker daemon is running
                    until docker version &> /dev/null; do
                        sleep 1
                    done
                    echo "Docker daemon is up!"
                '''
            }
        }
    }
    stage('Docker: Login to ECR') {
        steps {
            container('dind') {
                sh '''
                    cat $SHARED_DATA_PATH/$AWS_ECR_TOKEN_FILE | docker login --password-stdin --username $DOCKER_USERNAME $REGISTRY 
                '''
            }
        }
    }
    stage('Docker: Build, Tag & Push Images') {
      when {      
        expression {
            return env.BRANCH_NAME != 'main';
        }
      }
      steps {
        script {
        //   def services = ["frontend", "polybot", "yolo5", "chatgpt-telegram-bot", "tumblr"] 
          def services = ["chatgpt-telegram-bot"] 
          for (int i = 0; i < services.size(); i++) {
            stage("Build ${services[i]}") {
              container('dind') {
                BuildTagAndPush("${services[i]}")
              }
            }
          }
        }
      }
    }

    stage('Terraform: Create Infrastructure') {
        when {      
            expression {
                return env.BRANCH_NAME != 'main';
            }
        }
        steps {
            container('terraform') {
                dir(path: "terraform") {
                    sh '''

                    echo ""
                    terraform version

                    echo ""
                    echo "Initializing Terraform (backend: S3)"
                    terraform init -backend-config=backend.hcl

                    echo ""
                    echo "Validating Terraform"
                    terraform validate

                    echo ""
                    echo "Planning Terraform"
                    terraform plan -out=tfplan

                    echo ""
                    echo "Applying Terraform"
                    terraform apply -auto-approve tfplan

                    echo ""
                    echo "Showing Terraform state"
                    terraform show

                    echo ""
                    echo "Getting instance ID"  
                    terraform output "instance_id" | xargs > $SHARED_DATA_PATH/$EC2_INSTANCES_IDS
                    cat $SHARED_DATA_PATH/$EC2_INSTANCES_IDS


                    echo ""
                    echo "Getting instance public IP"  
                    terraform output "instance_public_ip" | xargs > $SHARED_DATA_PATH/$EC2_INSTANCES_PUBLIC_IP_ADDRESSES
                    cat $SHARED_DATA_PATH/$EC2_INSTANCES_PUBLIC_IP_ADDRESSES



                    echo ""
                    echo "Done creating infrastructure with Terraform"

                    '''
                }
            }
        }
    }

// "running"
    stage('AWS: Make sure EC2 instance is up') {
        when {      
            expression {
                return env.BRANCH_NAME != 'master';
            }
        }
        steps {
            container('aws') {
                sh '''
                    echo "Retrieving EC2 instance IDs from shared data volume ..."
                    INSTANCE_IDS=$(cat $SHARED_DATA_PATH/$EC2_INSTANCES_IDS)
                    INSTANCE_REGION="us-east-2"

                    echo "Restarting EC2 instances ..."
                    aws ec2 start-instances --region $INSTANCE_REGION --instance-ids $INSTANCE_IDS

                    echo ""
                    echo "Checking EC2 instance status ..."
                    aws ec2 describe-instance-status \
                    --query "InstanceStatuses[0].InstanceState.Name" \
                    --region $INSTANCE_REGION --instance-ids $INSTANCE_IDS | xargs

                    echo ""
                    
                    until [[ "$(aws ec2 describe-instance-status \
                        --query "InstanceStatuses[0].InstanceState.Name" \
                        --region $INSTANCE_REGION --instance-ids $INSTANCE_IDS | xargs)" = "running" ]] ; 
                    do
                        echo "Waiting for EC2 instance to be up ..."
                        sleep 1
                    done 
            '''
            }
        }
    }
                //   aws ec2 wait instance-status-ok --instance-ids $INSTANCE_IDS

                    //   curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && \
                    //   unzip awscliv2.zip && \
                    //   sudo ./aws/install
    stage ("SSH: Deploy Code to EC2 Inatance"){
    //    when {
    //     branch 'main-1'
    //   }
    // if docker version &> /dev/null; then
      steps{
        container('terraform') {
          withCredentials([sshUserPrivateKey(credentialsId: "aws-ec2-keypair", keyFileVariable: 'CREDENTIALS_FILE')]) {
                sh '''

                    EC2_INSTANCE_PUBLIC_IP=$(cat $SHARED_DATA_PATH/$EC2_INSTANCES_PUBLIC_IP_ADDRESSES)  
                    EC2_ADMIN_USERNAME="ubuntu"
                    EC2_ADDRESS="${EC2_ADMIN_USERNAME}@${EC2_INSTANCE_PUBLIC_IP}"

                    ssh -o StrictHostKeyChecking=no -i ${CREDENTIALS_FILE} ${EC2_ADDRESS} """
                        mkdir -p /home/ubuntu/test
                        ls -l
                    """

                    echo ""
                    echo "Copying docker-compose.yaml to EC2 instance"
                    scp -r -i ${CREDENTIALS_FILE} object-detection/docker-compose.yaml ${EC2_ADDRESS}:/home/ubuntu/test/docker-compose.yaml

                    echo ""
                    echo "Copying aws-ecr-token to EC2 instance"
                    scp -r -i ${CREDENTIALS_FILE} $SHARED_DATA_PATH/$AWS_ECR_TOKEN_FILE ${EC2_ADDRESS}:/home/ubuntu/test/$AWS_ECR_TOKEN_FILE

                    echo ""
                    echo "Running docker-compose.yaml on EC2 instance"
                    ssh -o StrictHostKeyChecking=no -i ${CREDENTIALS_FILE} ${EC2_ADDRESS} """

                    echo ""
                    echo "Checking if Docker is installed"
                     if docker version 2>/dev/null | grep -q Version; then
                        echo "Docker is installed"
                    else
                        echo "Installing Docker ..."
                        sudo apt update
                        sudo apt -y install docker.io 
                        sudo apt -y install docker-compose
                        sudo apt -y install curl unzip 
                    fi
         
                    echo "" 
                    until sudo docker version &> /dev/null; do
                        echo "Waiting for Docker daemon to be up ..."
                        sleep 1
                    done
                    echo "Docker daemon is up!"

                    cat test/$AWS_ECR_TOKEN_FILE | sudo docker login --password-stdin --username $DOCKER_USERNAME $REGISTRY 

                    sudo docker-compose -f test/docker-compose.yaml pull
                    sudo docker-compose -f test/docker-compose.yaml up -d --remove-orphans
                    sudo docker-compose -f test/docker-compose.yaml ps
                    sudo docker image prune --force --all
                    """
                '''

          }
        }
      }
    }  
  }
  post {
    always {
        container('dind') {
          sh '''
            docker logout
          '''
        }
    }
  }
} 
